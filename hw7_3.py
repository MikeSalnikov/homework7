# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
#
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, num: int):
        self.number_of_cells = num
    def __add__(self, other):
        return f'Операция объединения двух клеток. Результат: {self.number_of_cells + other.number_of_cells}'
    def __sub__(self, other):
        if self.number_of_cells - other.number_of_cells != 0:
            a = self.number_of_cells - other.number_of_cells
            b = (a)
            return f'Вычитание клеток. Результат:{b}'
        else:
            return f'Клетка больше не существует.'
    def __mul__(self, other):
        return f'Умножение клеток. Результат: {self.number_of_cells * other.number_of_cells}'
    def __truediv__(self, other):
        return f'Деление клеток. Результат: {self.number_of_cells // other.number_of_cells}'
    def make_order(self, inrow):
        cel = ''
        for i in range(int(self.number_of_cells / inrow)):
            cel += '*' * inrow + '\n'
        cel += '*' * (self.number_of_cells % inrow) + '\n'
        return cel


cell1 = Cell(25)
cell2 = Cell(20)
print(cell1 + cell2)
print(cell1 - cell2)
print(cell1 * cell2)
print(cell1 / cell2)
print(cell1.make_order(10))